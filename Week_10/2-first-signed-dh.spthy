theory FirstSignedDiffieHellman
begin

/* Signed Diffie-Hellman protocol, first attempt:
   A -> B : A, g^x  (x fresh)
   B -> A : B, g^y, sign(<g^y,g^x>,kB)  (y fresh)
   A -> B : A, sign(<g^x,g^y>,kA)  */


/* ----------------- */
/* Equational theory */
/* ----------------- */

/* Load the built-in Diffie-Hellman and signature equational theories */
builtins: diffie-hellman, signing



/* ------------------ */
/* Key infrastructure */
/* ------------------ */

rule genkey:  // generate long-term key pair, publish the public key
   [ Fr(~kA) ] 
   -->
   [ !Key($A, ~kA),  // notation: !Fact = persistent fact, not consumed by rules
     !Pk($A, pk(~kA)),
     Out(pk(~kA)) ]


/*----------------*/
/* Protocol rules */
/*----------------*/


/* Question 3 here */


/* Initiator role */

//Step 1
rule Init_1:
  let gxI = 'g'^~xI in         //A's part of the key. naming conventions: ~n for n:fresh, 'g' for a public constant g
   [ Fr(~xI) ]                 // generate a fresh value ~xI
   -->
   [ Init_1($A, ~xI, gxI),     // we use this fact to record the local state of the role
     Out(<$A, gxI>) ]          // naming conventions: $A for A:pub

//Step 3
rule Init_2:
   let kI = Y^~xI in  
   [ Init_1($A, ~xI, gxI),
     !Pk($B, pk(kB)),
     !Key($A, kA),
     In( <$B, Y, sign{Y, gxI}kB> )
   ]
   --[ FinishedI($A),              // record that the initiator has executed her last rule
       SecretI($A, $B, kI) ]->      // record that the initiator believes Y^~xI should be secret
   [ Init_2($A, $B, ~xI, gxI, Y, kI), Out(<$A, sign{gxI,Y}kA>) ] // update the state (although we won't use it since this is the last rule)
   
/* Responder role */
//Step 2
rule Init_3:
   let gyI = 'g'^~yI in 
    [ Fr(~yI), 
      In(<$A, X>),
      !Key($B, kB)
      ]  
   --> 
      [ Out(<$B, gyI, sign{gyI, X}kB>),
        Init_3($B, ~yI, X, gyI)]

//Step 4
rule Init_4:
    let gxy = X^~yI in 
    [ Init_3($B,  ~yI, X, gyI),
      !Pk($A, pk(kA)) ,
      In( <$A, sign{X, gyI}kA> )
     ]
   --[ FinishedR($B),
        SecretR($B, $A, gxy)]->
   [ Init_4($B, $A,  ~yI, gyI, X, gxy)]
    


/* ---------- */
/* Key Reveal */
/* ---------- */


/* Question 4 here */


rule Key_Reveal:
    [ !Key($A, ~kA) ]
   --[ Compromised($A) ]->
   [ Out(~kA) ]

/* ---------- */
/* Properties */
/* ---------- */

/* Executability checks */
lemma executableI:
exists-trace "Ex #i A. FinishedI(A) @ i & not (Ex #j B. Compromised(B)@j)"

lemma executableR:
exists-trace "Ex #i B. FinishedR(B) @ i & not (Ex #j B. Compromised(B)@j)"


/* Key secrecy (2nd version):  (Question 5)
   in all traces, if a key is marked as secret between two uncompromised agents,
   then the attacker cannot learn it */
lemma key_secrecyI:
"All #i A B k.
 (SecretI(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"

lemma key_secrecyR:
"All #i A B k.
 (SecretR(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"


end



