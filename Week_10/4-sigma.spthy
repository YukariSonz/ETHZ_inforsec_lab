theory BasicSigma
begin

/* Basic Sigma protocol
   A -> B : g^x  (x fresh)
   B -> A : g^y, B, sign(<g^x,g^y>,kB), mac(B,km)  (y fresh, km=kdf_m(g^(xy)))
   A -> B : A, sign(<g^y,g^x>,kA), mac(A,km) */

/* ----------------- */
/* Equational theory */
/* ----------------- */

/* Load the built-in Diffie-Hellman and signature equational theories */
builtins: diffie-hellman, signing

/* Define functions modelling MACs and KDFs, with no associated equations */
functions: mac/2, kdf_m/1


/* ------------------ */
/* Key infrastructure */
/* ------------------ */

rule genkey:
   [ Fr(~kA) ] 
   -->
   [ !Key($A, ~kA), 
     !Pk($A, pk(~kA)),
     Out(pk(~kA)) ]



/* Question 8 here */
//Step 1
rule Init_1:
  let gxI = 'g'^~xI in         //A's part of the key. naming conventions: ~n for n:fresh, 'g' for a public constant g
   [ Fr(~xI) ]                 // generate a fresh value ~xI
   -->
   [ Init_1($A, ~xI, gxI),     // we use this fact to record the local state of the role
     Out(<gxI>) ]          // naming conventions: $A for A:pub

//Step 3
rule Init_2:
   let kI = Y^~xI in  
   [ Init_1($A, ~xI, gxI),
     !Pk($B, pk(kB)),
     !Key($A, kA),
     In( <Y, $B, sign{Y, gxI}kB, mac($B, kdf_m(Y^~xI))  > )
   ]
   --[ Running('Resp','Init',$B , $A , kI), 
       FinishedI($A),              // record that the initiator has executed her last rule
       SecretI($A, $B, kI) ]->      // record that the initiator believes Y^~xI should be secret
   [ Init_2($A, $B, ~xI, gxI, Y, kI), Out(<$A, sign{gxI,Y}kA, mac($A, kdf_m(kI)) >) ] // update the state (although we won't use it since this is the last rule)
   
/* Responder role */
//Step 2
rule Init_3:
   let gyI = 'g'^~yI in 
    [ Fr(~yI), 
      In(<X>),
      !Key($B, kB)
      ]  
   --> 
      [ Out(<gyI, $B, sign{gyI, X}kB , mac($B, kdf_m(X^~yI)) >),
        Init_3($B, ~yI, X, gyI)]

//Step 4
rule Init_4:
    let gxy = X^~yI in 
    [ Init_3($B,  ~yI, X, gyI),
      !Pk($A, pk(kA)) ,
      In( <$A, sign{X, gyI}kA, mac($A, kdf_m(X^~yI))> )
     ]
   --[ Commit('Resp','Init',$B , $A , gxy), 
       FinishedR($B),
        SecretR($B, $A, gxy)]->
   [ Init_4($B, $A,  ~yI, gyI, X, gxy)]
    


/* ---------- */
/* Key Reveal */
/* ---------- */




rule Key_Reveal:
    [ !Key($A, ~kA) ]
   --[ Compromised($A) ]->
   [ Out(~kA) ]



/* ---------- */
/* Properties */
/* ---------- */

/* Executability checks */
lemma executableI:
exists-trace "Ex #i A. FinishedI(A) @ i & not (Ex #j B. Compromised(B)@j)"

lemma executableR:
exists-trace "Ex #i B. FinishedR(B) @ i & not (Ex #j B. Compromised(B)@j)"



/* Key secrecy */
lemma key_secrecyI:
"All #i A B k.
 (SecretI(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"

lemma key_secrecyR:
"All #i A B k.
 (SecretR(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"


/* Forward secrecy of the key: (Question 9)
   in all traces, if a key is marked as a secret between two agents
   who were not compromised *before they key was marked*,
   then the attacker cannot learn it */
lemma key_forward_secrecyI:
"All #i A B k.
 (SecretI(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l & l < i) |
       (Ex #m. Compromised(B) @ m & m < i)))
  ==> not (Ex #j. K(k) @ j)"

lemma key_forward_secrecyR:
"All #i A B k.
 (SecretR(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l & l < i) |
       (Ex #m. Compromised(B) @ m & m < i)))
  ==> not (Ex #j. K(k) @ j)"


/* Agreement of the responder with the initiator */
lemma agreement:
"All #i A B k.
  (Commit('Resp', 'Init', B, A, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. Running('Resp', 'Init', B, A, k) @ j & j < i)"

end



