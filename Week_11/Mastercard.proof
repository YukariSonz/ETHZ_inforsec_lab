theory Mastercard begin

// Function signature and definition of the equational theory E

functions: MAC/3, MACprime/2, adec/2, aenc/2, f/2, fst/1, pair/2, pk/1,
           sign/2, snd/1, true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



rule (modulo E) Terminal_Issuer_Channel:
   [ Send( Sender, Recipient, channelID, msg ) ]
  -->
   [ Recv( Sender, Recipient, channelID, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Generate_ATC:
   [ Fr( ~ATC ) ] --> [ !ATC( ~ATC ), Out( ~ATC ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_Card:
   [ Fr( ~PAN ), Fr( ~mk ), Fr( ~privkCard ) ]
  -->
   [
   !SharedKey( ~PAN, ~mk ), !IssuedBy( ~PAN, $Issuer ),
   !LtkCard( ~PAN, ~privkCard ), !Pk( ~PAN, pk(~privkCard) ),
   Out( pk(~privkCard) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromise_Card:
   [ !LtkCard( ~PAN, ~privkCard ) ]
  --[ Compromise( ~PAN ) ]->
   [ Out( <~PAN, ~privkCard> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Compromise_Shared_Key:
   [ !IssuedBy( ~PAN, $Issuer ), !SharedKey( ~PAN, ~mk ) ]
  --[ Compromise( $Issuer ), Compromise( ~PAN ) ]->
   [ Out( ~mk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Sends_GPO:
   [ Fr( ~un ) ]
  -->
   [
   Out( <'GET_PROCESSING_OPTIONS', $amount, ~un> ),
   Terminal_Sent_GPO( $Terminal, <$amount, ~un> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_To_GPO:
   [
   In( <'GET_PROCESSING_OPTIONS', PDOL> ), !ATC( ATC ),
   !LtkCard( ~PAN, ~privkCard )
   ]
  --[ Once( <~PAN, ATC, 'Card'> ) ]->
   [ Out( 'DDA' ), Card_Responded_To_GPO( ~PAN, PDOL, ATC ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Reads_Record:
   [ In( 'DDA' ), Terminal_Sent_GPO( $Terminal, PDOL ) ]
  -->
   [ Out( 'READ_RECORD' ), Terminal_Readed_Record( $Terminal, PDOL ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Responds_PAN:
   [ In( 'READ_RECORD' ), Card_Responded_To_GPO( ~PAN, PDOL, ATC ) ]
  -->
   [ Out( ~PAN ), Card_Responded_PAN( ~PAN, PDOL, ATC ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receive_PAN:
   [ In( ~PAN ), Terminal_Readed_Record( $Terminal, <$amount, UN> ) ]
  -->
   [
   Out( <'INTERNAL_AUTHENTICATE', UN> ),
   Terminal_Received_PAN( $Terminal, <$amount, UN>, ~PAN )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Send_SDAD:
   [
   In( <'INTERNAL_AUTHENTICATE', UN> ),
   Card_Responded_PAN( ~PAN, PDOL, ATC ), Fr( ~nc ),
   !LtkCard( ~PAN, ~privkCard )
   ]
  -->
   [
   Out( <~nc, sign(<~nc, UN>, ~privkCard)> ),
   Card_Sent_SDAD( ~PAN, PDOL, ATC )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Verify:
   [
   In( <nc, SDAD> ), Terminal_Received_PAN( $Terminal, <amount, UN>, ~PAN ),
   !Pk( ~PAN, pk(~privkCard) )
   ]
  --[ Eq( verify(SDAD, <nc, UN>, pk(~privkCard)), true ) ]->
   [
   Out( 'GENERATE_AC' ),
   Terminal_Sent_GenerateAC( $Terminal, ~PAN, <amount, UN> )
   ]

  /*
  rule (modulo AC) Terminal_Verify:
     [
     In( <nc, SDAD> ), Terminal_Received_PAN( $Terminal, <amount, UN>, ~PAN ),
     !Pk( ~PAN, pk(~privkCard) )
     ]
    --[ Eq( z, true ) ]->
     [
     Out( 'GENERATE_AC' ),
     Terminal_Sent_GenerateAC( $Terminal, ~PAN, <amount, UN> )
     ]
    variants (modulo AC)
    1. ~privkCard
             = ~privkCard.11
       SDAD  = SDAD.12
       UN    = UN.13
       nc    = nc.15
       z     = verify(SDAD.12, <nc.15, UN.13>, pk(~privkCard.11))
    
    2. ~privkCard
             = ~privkCard.13
       SDAD  = sign(<nc.17, UN.15>, ~privkCard.13)
       UN    = UN.15
       nc    = nc.17
       z     = true
  */

rule (modulo E) Card_Send_TC:
   [
   In( 'GENERATE_AC' ), !SharedKey( ~PAN, ~mk ), !IssuedBy( ~PAN, $Issuer ),
   Card_Sent_SDAD( ~PAN, PDOL, ATC )
   ]
  --[
  Running( ~PAN, 'Terminal',
           <'Card', 'Terminal', ~PAN, PDOL, ATC, MAC(f(~mk, ATC), PDOL, ATC)>
  ),
  Running( ~PAN, $Issuer,
           <'Card', 'Issuer', ~PAN, PDOL, ATC, MAC(f(~mk, ATC), PDOL, ATC)>
  )
  ]->
   [ Out( <'TC', ATC, MAC(f(~mk, ATC), PDOL, ATC)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card_Send_ARQC:
   [
   In( 'GENERATE_AC' ), !SharedKey( ~PAN, ~mk ), !IssuedBy( ~PAN, $Issuer ),
   Card_Sent_SDAD( ~PAN, PDOL, ATC )
   ]
  --[
  Running( ~PAN, 'Terminal',
           <'Card', 'Terminal', ~PAN, PDOL, ATC, MAC(f(~mk, ATC), PDOL, ATC)>
  ),
  Running( ~PAN, $Issuer,
           <'Card', 'Issuer', ~PAN, PDOL, ATC, MAC(f(~mk, ATC), PDOL, ATC)>
  )
  ]->
   [ Out( <'ARQC', ATC, MAC(f(~mk, ATC), PDOL, ATC)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_TC:
   [
   Terminal_Sent_GenerateAC( $Terminal, ~PAN, PDOL ), In( <'TC', ATC, AC> ),
   !IssuedBy( ~PAN, $Issuer )
   ]
  --[
  Commit( 'Terminal', ~PAN, <'Card', 'Terminal', ~PAN, PDOL, ATC, AC> ),
  Honest( $Issuer ), Honest( ~PAN )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Receives_ARQC:
   [
   Terminal_Sent_GenerateAC( $Terminal, ~PAN, PDOL ),
   In( <'ARQC', ATC, AC> ), Fr( ~cid ), !IssuedBy( ~PAN, $Issuer )
   ]
  --[
  Running( $Terminal, $Issuer, <'Terminal', 'Issuer', ~PAN, PDOL, ATC, AC>
  )
  ]->
   [
   Send( $Terminal, $Issuer, <~cid, '1'>, <~PAN, PDOL, ATC, AC> ),
   Terminal_Received_ARQC( $Terminal, ~PAN, PDOL, ATC, AC, ~cid )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Terminal_Accept:
   [
   Recv( $Issuer, $Terminal, <~cid, '2'>, <'ACCEPTED', ARPC> ),
   Terminal_Received_ARQC( $Terminal, ~PAN, PDOL, ATC, AC, ~cid )
   ]
  --[
  Online( ),
  Commit( 'Terminal', ~PAN, <'Card', 'Terminal', ~PAN, PDOL, ATC, AC> ),
  Commit( $Terminal, $Issuer, <'Issuer', 'Terminal', ~PAN, PDOL, ATC, AC>
  ),
  Honest( $Issuer ), Honest( ~PAN )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Issuer_Receives_AC:
   [
   Recv( $Terminal, $Issuer, <channelID, '1'>,
         <~PAN, PDOL, ATC, MAC(f(~mk, ATC), PDOL, ATC)>
   ),
   !SharedKey( ~PAN, ~mk ), !IssuedBy( ~PAN, $Issuer )
   ]
  --[
  Once( <~PAN, ATC, 'Issuer'> ),
  Running( $Issuer, $Terminal,
           <'Issuer', 'Terminal', ~PAN, PDOL, ATC, MAC(f(~mk, ATC), PDOL, ATC)>
  )
  ]->
   [
   Issuer_Commits( $Issuer, $Terminal,
                   <~PAN, PDOL, ATC, MAC(f(~mk, ATC), PDOL, ATC)>, channelID,
                   MACprime(f(~mk, ATC), MAC(f(~mk, ATC), PDOL, ATC))
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Issuer_Commits:
   [
   Issuer_Commits( $Issuer, $Terminal, <~PAN, PDOL, ATC, AC>, channelID,
                   ARPC
   )
   ]
  --[
  Commit( $Issuer, ~PAN, <'Card', 'Issuer', ~PAN, PDOL, ATC, AC> ),
  Commit( $Issuer, $Terminal, <'Terminal', 'Issuer', ~PAN, PDOL, ATC, AC>
  ),
  Honest( $Issuer ), Honest( ~PAN )
  ]->
   [ Send( $Issuer, $Terminal, <channelID, '2'>, <'ACCEPTED', ARPC> ) ]

  /* has exactly the trivial AC variant */

restriction equal:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction once:
  "∀ a #i #j. ((Once( a ) @ #i) ∧ (Once( a ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma executable_offline:
  exists-trace
  "∃ PAN t #i #j.
    ((((¬(Online( ) @ #j)) ∧ (#i < #j)) ∧
      (Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i)) ∧
     (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #j)) ∧
    (¬(∃ A #a. Compromise( A ) @ #a))"
/*
guarded formula characterizing all satisfying traces:
"∃ PAN t #i #j.
  (Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i) ∧
  (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #j)
 ∧
  (¬(Online( ) @ #j)) ∧ (#i < #j) ∧ (∀ A #a. (Compromise( A ) @ #a) ⇒ ⊥)"
*/
simplify
solve( Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i )
  case Card_Send_ARQC
  solve( !SharedKey( ~PAN, ~mk ) ▶₁ #i )
    case Create_Card
    solve( !IssuedBy( ~PAN, $Issuer ) ▶₂ #i )
      case Create_Card
      solve( Card_Sent_SDAD( ~PAN, PDOL, ATC ) ▶₃ #i )
        case Card_Send_SDAD
        solve( Commit( 'Terminal', ~PAN,
                       <'Card', 'Terminal', ~PAN, PDOL, ~ATC, MAC(f(~mk, ~ATC), PDOL, ~ATC)>
               ) @ #j )
          case Terminal_Receives_TC
          solve( Terminal_Sent_GenerateAC( $Terminal, ~PAN, PDOL ) ▶₀ #j )
            case Terminal_Verify
            solve( !IssuedBy( ~PAN, $Issuer.1 ) ▶₂ #j )
              case Create_Card
              solve( !KU( sign(<nc.1, ~un>, ~privkCard) ) @ #vk.15 )
                case Card_Send_SDAD
                solve( !KU( ~ATC ) @ #vk.14 )
                  case Card_Send_ARQC
                  solve( !KU( ~PAN ) @ #vk.20 )
                    case Card_Responds_PAN
                    solve( !KU( ~un ) @ #vk.24 )
                      case Terminal_Receive_PAN
                      solve( !KU( ~nc ) @ #vk.22 )
                        case Card_Send_SDAD
                        solve( !KU( MAC(f(~mk, ~ATC), <$amount, ~un>, ~ATC) ) @ #vk.22 )
                          case Card_Send_ARQC
                          SOLVED // trace found
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma executable_online:
  exists-trace
  "∃ PAN Issuer t #i #j #k #l.
    (((((((Online( ) @ #j) ∧ (#i < #j)) ∧
         (Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i)) ∧
        (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #j)) ∧
       (#k < #l)) ∧
      (Running( PAN, Issuer, <'Card', 'Issuer', t> ) @ #k)) ∧
     (Commit( Issuer, PAN, <'Card', 'Issuer', t> ) @ #l)) ∧
    (¬(∃ A #a. Compromise( A ) @ #a))"
/*
guarded formula characterizing all satisfying traces:
"∃ PAN Issuer t #i #j #k #l.
  (Online( ) @ #j) ∧
  (Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #i) ∧
  (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #j) ∧
  (Running( PAN, Issuer, <'Card', 'Issuer', t> ) @ #k) ∧
  (Commit( Issuer, PAN, <'Card', 'Issuer', t> ) @ #l)
 ∧
  (#i < #j) ∧ (#k < #l) ∧ (∀ A #a. (Compromise( A ) @ #a) ⇒ ⊥)"
*/
simplify
solve( Recv( $Issuer, $Terminal, <~cid, '2'>, <'ACCEPTED', ARPC>
       ) ▶₀ #j )
  case Terminal_Issuer_Channel
  solve( Terminal_Received_ARQC( $Terminal, ~PAN, PDOL.1, ATC.1, AC, ~cid
         ) ▶₁ #j )
    case Terminal_Receives_ARQC
    solve( Running( PAN.2, 'Terminal', <'Card', 'Terminal', t> ) @ #i )
      case Card_Send_ARQC
      solve( !SharedKey( ~PAN, ~mk ) ▶₁ #i )
        case Create_Card
        solve( !IssuedBy( ~PAN, $Issuer ) ▶₂ #i )
          case Create_Card
          solve( Card_Sent_SDAD( ~PAN, PDOL, ATC ) ▶₃ #i )
            case Card_Send_SDAD
            solve( Commit( 'Terminal', ~PAN,
                           <'Card', 'Terminal', ~PAN, PDOL, ~ATC, MAC(f(~mk, ~ATC), PDOL, ~ATC)>
                   ) @ #j )
              case Terminal_Accept
              solve( Running( ~PAN, Issuer.2,
                              <'Card', 'Issuer', ~PAN, <$amount, ~un>, ~ATC, 
                               MAC(f(~mk, ~ATC), <$amount, ~un>, ~ATC)>
                     ) @ #k )
                case Card_Send_ARQC
                solve( !SharedKey( ~PAN, ~mk ) ▶₁ #k )
                  case Create_Card
                  solve( !IssuedBy( ~PAN, $Issuer.2 ) ▶₂ #k )
                    case Create_Card
                    solve( Card_Sent_SDAD( ~PAN, <$amount, ~un>, ~ATC ) ▶₃ #k )
                      case Card_Send_SDAD
                      solve( Commit( $Issuer, ~PAN,
                                     <'Card', 'Issuer', ~PAN, <$amount, ~un>, ~ATC, 
                                      MAC(f(~mk, ~ATC), <$amount, ~un>, ~ATC)>
                             ) @ #l )
                        case Issuer_Commits
                        solve( Issuer_Commits( $Issuer, $Terminal.1,
                                               <~PAN, <$amount, ~un>, ~ATC, 
                                                MAC(f(~mk, ~ATC), <$amount, ~un>, ~ATC)>,
                                               channelID, ARPC
                               ) ▶₀ #l )
                          case Issuer_Receives_AC
                          solve( !KU( sign(<nc, ~un>, ~privkCard.1) ) @ #vk.7 )
                            case Card_Send_SDAD
                            solve( Recv( $Terminal, $Issuer.1, <~cid, '1'>,
                                         <~PAN.1, PDOL, ATC.1, MAC(f(~mk.1, ATC.1), PDOL, ATC.1)>
                                   ) ▶₀ #vr.2 )
                              case Terminal_Issuer_Channel
                              solve( !KU( ~PAN ) @ #vk.8 )
                                case Card_Responds_PAN
                                solve( !KU( ~ATC ) @ #vk.6 )
                                  case Card_Send_ARQC
                                  solve( !KU( ~un ) @ #vk.24 )
                                    case Terminal_Receive_PAN
                                    solve( !KU( ~nc ) @ #vk.9 )
                                      case Card_Send_SDAD
                                      solve( !KU( MAC(f(~mk, ~ATC), <$amount, ~un>, ~ATC) ) @ #vk.11 )
                                        case Card_Send_ARQC
                                        SOLVED // trace found
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma auth_to_terminal_offline:
  all-traces
  "∀ PAN t #i.
    ((¬(Online( ) @ #i)) ∧
     (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #i)) ⇒
    ((∃ #j. Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #j) ∨
     (∃ C #r. (Compromise( C ) @ #r) ∧ (Honest( C ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ PAN t #i.
  (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #i)
 ∧
  (¬(Online( ) @ #i)) ∧
  (∀ #j. (Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #j) ⇒ ⊥) ∧
  (∀ C #r. (Compromise( C ) @ #r) ∧ (Honest( C ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #i )
  case Terminal_Receives_TC
  solve( Terminal_Sent_GenerateAC( $Terminal, ~PAN, PDOL ) ▶₀ #i )
    case Terminal_Verify
    solve( !IssuedBy( ~PAN, $Issuer ) ▶₂ #i )
      case Create_Card
      solve( !KU( ~PAN ) @ #vk.8 )
        case Card_Responds_PAN
        solve( !KU( sign(<nc, ~un>, ~privkCard) ) @ #vk.8 )
          case Card_Send_SDAD
          solve( !KU( ~un ) @ #vk.17 )
            case Terminal_Receive_PAN
            solve( !KU( ~nc ) @ #vk.9 )
              case Card_Send_SDAD
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma auth_to_terminal_online:
  all-traces
  "∀ PAN Terminal Issuer t #k.
    (((Commit( Terminal, Issuer, <'Issuer', 'Terminal', t> ) @ #k) ∧
      (Online( ) @ #k)) ∧
     (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #k)) ⇒
    (((∃ #j. Running( Issuer, Terminal, <'Issuer', 'Terminal', t> ) @ #j) ∧
      (∃ #s. Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #s)) ∨
     (∃ C #r. (Compromise( C ) @ #r) ∧ (Honest( C ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ PAN Terminal Issuer t #k.
  (Commit( Terminal, Issuer, <'Issuer', 'Terminal', t> ) @ #k) ∧
  (Online( ) @ #k) ∧
  (Commit( 'Terminal', PAN, <'Card', 'Terminal', t> ) @ #k)
 ∧
  (((∀ #j.
      (Running( Issuer, Terminal, <'Issuer', 'Terminal', t> ) @ #j) ⇒ ⊥) ∨
    (∀ #s.
      (Running( PAN, 'Terminal', <'Card', 'Terminal', t> ) @ #s) ⇒ ⊥))) ∧
  (∀ C #r. (Compromise( C ) @ #r) ∧ (Honest( C ) @ #k) ⇒ ⊥)"
*/
simplify
solve( (∀ #j.
         (Running( Issuer.1, Terminal.1, <'Issuer', 'Terminal', t> ) @ #j) ⇒ ⊥)  ∥
       (∀ #s.
         (Running( PAN.1, 'Terminal', <'Card', 'Terminal', t> ) @ #s) ⇒ ⊥) )
  case case_1
  solve( Recv( $Issuer, $Terminal, <~cid, '2'>, <'ACCEPTED', ARPC>
         ) ▶₀ #k )
    case Terminal_Issuer_Channel
    solve( Terminal_Received_ARQC( $Terminal, ~PAN, PDOL.1, ATC.1, AC, ~cid
           ) ▶₁ #k )
      case Terminal_Receives_ARQC
      solve( Commit( Terminal.1, Issuer.2, <'Issuer', 'Terminal', t> ) @ #k )
        case Terminal_Accept
        solve( Commit( 'Terminal', PAN.2,
                       <'Card', 'Terminal', ~PAN, <$amount, ~un>, ATC.1, AC>
               ) @ #k )
          case Terminal_Accept
          solve( !KU( ~PAN ) @ #vk.8 )
            case Card_Responds_PAN
            solve( !KU( sign(<nc, ~un>, ~privkCard.1) ) @ #vk.8 )
              case Card_Send_SDAD
              solve( Recv( $Terminal, $Issuer, <~cid, '1'>,
                           <~PAN.1, PDOL, ATC, MAC(f(~mk, ATC), PDOL, ATC)>
                     ) ▶₀ #vr.2 )
                case Terminal_Issuer_Channel
                by contradiction /* from formulas */
              qed
            next
              case c_sign
              solve( !KU( ~privkCard.1 ) @ #vk.15 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Recv( $Issuer, $Terminal, <~cid, '2'>, <'ACCEPTED', ARPC>
         ) ▶₀ #k )
    case Terminal_Issuer_Channel
    solve( Terminal_Received_ARQC( $Terminal, ~PAN, PDOL.1, ATC.1, AC, ~cid
           ) ▶₁ #k )
      case Terminal_Receives_ARQC
      solve( Commit( Terminal.1, Issuer.2, <'Issuer', 'Terminal', t> ) @ #k )
        case Terminal_Accept
        solve( Commit( 'Terminal', PAN.2,
                       <'Card', 'Terminal', ~PAN, <$amount, ~un>, ATC.1, AC>
               ) @ #k )
          case Terminal_Accept
          solve( !KU( ~PAN ) @ #vk.8 )
            case Card_Responds_PAN
            solve( !KU( sign(<nc, ~un>, ~privkCard.1) ) @ #vk.8 )
              case Card_Send_SDAD
              solve( Recv( $Terminal, $Issuer, <~cid, '1'>,
                           <~PAN.1, PDOL, ATC, MAC(f(~mk, ATC), PDOL, ATC)>
                     ) ▶₀ #vr.2 )
                case Terminal_Issuer_Channel
                solve( !KU( MAC(f(~mk, ATC), <$amount, ~un>, ATC) ) @ #vk.7 )
                  case Card_Send_ARQC
                  by contradiction /* from formulas */
                next
                  case Card_Send_TC
                  by contradiction /* from formulas */
                next
                  case c_MAC
                  solve( !KU( f(~mk, ATC) ) @ #vk.20 )
                    case c_f
                    solve( !KU( ~mk ) @ #vk.22 )
                      case Compromise_Shared_Key
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCard.1 ) @ #vk.15 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma auth_to_issuer:
  all-traces
  "∀ PAN Issuer Terminal t #k.
    ((Commit( Issuer, PAN, <'Card', 'Issuer', t> ) @ #k) ∧
     (Commit( Issuer, Terminal, <'Terminal', 'Issuer', t> ) @ #k)) ⇒
    (((∃ #g. Running( PAN, Issuer, <'Card', 'Issuer', t> ) @ #g) ∧
      (∃ #m. Running( Terminal, Issuer, <'Terminal', 'Issuer', t> ) @ #m)) ∨
     (∃ C #r. (Compromise( C ) @ #r) ∧ (Honest( C ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ PAN Issuer Terminal t #k.
  (Commit( Issuer, PAN, <'Card', 'Issuer', t> ) @ #k) ∧
  (Commit( Issuer, Terminal, <'Terminal', 'Issuer', t> ) @ #k)
 ∧
  (((∀ #g. (Running( PAN, Issuer, <'Card', 'Issuer', t> ) @ #g) ⇒ ⊥) ∨
    (∀ #m.
      (Running( Terminal, Issuer, <'Terminal', 'Issuer', t> ) @ #m) ⇒ ⊥))) ∧
  (∀ C #r. (Compromise( C ) @ #r) ∧ (Honest( C ) @ #k) ⇒ ⊥)"
*/
simplify
solve( (∀ #g.
         (Running( PAN, Issuer, <'Card', 'Issuer', t> ) @ #g) ⇒ ⊥)  ∥
       (∀ #m.
         (Running( Terminal, Issuer, <'Terminal', 'Issuer', t> ) @ #m) ⇒ ⊥) )
  case case_1
  solve( Commit( Issuer, PAN, <'Card', 'Issuer', t> ) @ #k )
    case Issuer_Commits
    solve( Issuer_Commits( $Issuer, $Terminal, <~PAN, PDOL, ATC, AC>,
                           channelID, ARPC
           ) ▶₀ #k )
      case Issuer_Receives_AC
      solve( Commit( $Issuer, Terminal.1,
                     <'Terminal', 'Issuer', ~PAN, PDOL, ATC, MAC(f(~mk, ATC), PDOL, ATC)>
             ) @ #k )
        case Issuer_Commits
        solve( Recv( $Terminal, $Issuer, <channelID, '1'>,
                     <~PAN, PDOL, ATC, MAC(f(~mk, ATC), PDOL, ATC)>
               ) ▶₀ #vr )
          case Terminal_Issuer_Channel
          solve( !KU( ~PAN ) @ #vk.8 )
            case Card_Responds_PAN
            solve( !KU( sign(<nc, ~un>, ~privkCard) ) @ #vk.8 )
              case Card_Send_SDAD
              solve( !KU( MAC(f(~mk, ATC), <$amount, ~un>, ATC) ) @ #vk.6 )
                case Card_Send_ARQC
                by contradiction /* from formulas */
              next
                case Card_Send_TC
                by contradiction /* from formulas */
              next
                case c_MAC
                solve( !KU( f(~mk, ATC) ) @ #vk.20 )
                  case c_f
                  solve( !KU( ~mk ) @ #vk.22 )
                    case Compromise_Shared_Key
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case c_sign
              solve( !KU( ~privkCard ) @ #vk.15 )
                case Compromise_Card
                by contradiction /* from formulas */
              qed
            qed
          next
            case Compromise_Card
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Commit( Issuer, PAN, <'Card', 'Issuer', t> ) @ #k )
    case Issuer_Commits
    solve( Issuer_Commits( $Issuer, $Terminal, <~PAN, PDOL, ATC, AC>,
                           channelID, ARPC
           ) ▶₀ #k )
      case Issuer_Receives_AC
      solve( Commit( $Issuer, Terminal.1,
                     <'Terminal', 'Issuer', ~PAN, PDOL, ATC, MAC(f(~mk, ATC), PDOL, ATC)>
             ) @ #k )
        case Issuer_Commits
        solve( Recv( $Terminal, $Issuer, <channelID, '1'>,
                     <~PAN, PDOL, ATC, MAC(f(~mk, ATC), PDOL, ATC)>
               ) ▶₀ #vr )
          case Terminal_Issuer_Channel
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: Mastercard_20949053.spthy

  output:          Mastercard_20949053.proof
  processing time: 1.582336s
  executable_offline (exists-trace): verified (15 steps)
  executable_online (exists-trace): verified (22 steps)
  auth_to_terminal_offline (all-traces): falsified - found trace (9 steps)
  auth_to_terminal_online (all-traces): verified (29 steps)
  auth_to_issuer (all-traces): verified (22 steps)

==============================================================================
